{"version":3,"sources":["conversionTypes.tsx","check.js","ConvertersHandler.js","Components/Card.tsx","Components/FunctionCard.tsx","../node_modules/@elrondnetwork/bls-wasm sync /^/.//.*/.js$","App.js","index.js","convertersObjects.js","Components/ResultRow.tsx","Components/ConvertedRow.tsx"],"names":["ConversionTypes","bech32Address","input","startsWith","length","hexAddress","decimal","parseInt","toString","hexadecimal","Boolean","match","base64Value","base64EncodedString","amount","isNaN","denominatedAmount","stringValue","hexaEncodedString","Buffer","from","ConvertersHandler","React","useState","setInput","isVisible","setIsVisible","lastSelected","setLastSelected","displayableResults","setDisplayableResults","textarea","useRef","cardsRefs","isSingleMode","setIsSingleMode","indexes","displayPossibleResults","filter","result","map","conversionTypeId","resultValue","hasOnlyOneDisplayableResult","res","isBestResult","getNextIndex","shift","displayBlock","word","hasNoDisplayableResults","index","ref","current","hover","results","unselectPrevious","style","backgroundColor","highlightCard","console","log","document","activeElement","tagName","window","getSelection","startIndex","selectionStart","split","arrayIndex","substr","selectCard","borderRadius","textToSelect","startingPos","indexOf","setSelectionRange","focus","addToDisplayableResults","some","displayableResult","oldArray","hexConversions","hexInput","tryConvertHexToBech32","tryConvertHexToString","tryConvertHexToDecimal","tryConvertHexToBase64","convertWord","tryConvertBech32ToHex","tryConvertDecimalToHex","tryConvertDecimalToBase64","tryConvertBase64ToDecimal","tryConvertAmountToDemoninate","tryConvertDenominatedToAmount","tryConvertStringToHex","tryConvertStringToBase64","tryConvertBase64ToString","tryConvertBase64ToHex","tryConvertBase64ToHexDecimal","checks","hexaToDecimal","decimalToHexa","Address","bech32","hexToBech32","hex","bech32ToHex","base64ToHexadecimal","hexadecimalToBase64","base64ToString","stringToBase64","hexadecimalToString","stringToHexadecimal","Balance","fromString","toCurrencyString","denominatedToAmount","egld","amountToDenominated","base64ToDecimal","decimalToBase64","result1","result2","base64ToHexDecimal","className","color","href","onDoubleClick","onMouseUp","autoComplete","id","value","rows","resize","resizeBy","overflowX","width","placeholder","onChange","event","target","height","scrollHeight","onClick","display","position","zIndex","cursor","xmlns","viewBox","fill","d","inputArray","inputArrayLength","i","push","populateIndexesArray","Array","_","createRef","displayConversion","Card","onMouseEnter","marginTop","marginLeft","role","FunctionCard","props","onMouseOver","webpackContext","req","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","App","ReactDOM","render","StrictMode","getElementById","converters","label","ResultRow","showCheck","setShowCheck","copyToCliboard","text","navigator","clipboard","writeText","Promise","setTimeout","String","endsWith","denomination","top","left","displayDenominationIfNeeded","focusable","ConvertedRow","pair","Math","random"],"mappings":"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","file":"static/js/main.7ce82455.chunk.js","sourcesContent":["export enum ConversionTypes {\n  bech32ToHex,\n  hexToBech32,\n  decimalToHexa,\n  hexaToDecimal,\n  decimalToBase64,\n  base64ToDecimal,\n  amountToDenominated,\n  denominatedToAmount,\n  stringToHexadecimal,\n  hexadecimalToString,\n  stringToBase64,\n  base64ToString,\n  hexadecimalToBase64,\n  base64ToHexadecimal,\n  base64ToHexDecimal,\n}\n","export const bech32Address = (input) => {\n  if (!input || !input.startsWith(\"erd1\")) {\n    return false;\n  } else if (input.length !== 62) {\n    return false;\n  }\n\n  return true;\n};\n\nexport const hexAddress = (input) => {\n  if (input.length !== 64) {\n    return false;\n  }\n\n  return true;\n};\n\nexport const decimal = (input) => {\n  if (\n    parseInt(input, 10).toString(10) !== input &&\n    parseInt(input, 10) !== input\n  ) {\n    return false;\n  }\n\n  return true;\n};\n\nexport const hexadecimal = (input) => {\n  if (!Boolean(input.match(\"^[A-Fa-f0-9]+$\"))) {\n    return false;\n  }\n\n  return true;\n};\n\nexport const base64Value = (input) => {\n  return base64EncodedString(input);\n};\n\nexport const amount = (input) => {\n  return !isNaN(input);\n};\n\nexport const denominatedAmount = (input) => {\n  return !isNaN(input);\n};\n\nexport const stringValue = (input) => {\n  return true;\n  // return Boolean(input.match(\"^[A-Za-z0-9-]+$\"));\n};\n\nexport const hexaEncodedString = (input) => {\n  if (!Boolean(input.match(\"^[A-Fa-f0-9]+$\")) || input.length % 2 !== 0) {\n    return false;\n  }\n\n  return true;\n};\n\nexport const base64EncodedString = (input) => {\n  if (\n    !Boolean(\n      input.match(\n        \"^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$\"\n      )\n    )\n    && Buffer.from(input, 'base64') === null\n  ) {\n    return false;\n  }\n\n  return true;\n};\n","import React from \"react\";\nimport * as checks from \"./check\";\nimport { Address, Balance } from \"@elrondnetwork/erdjs/out\";\nimport { ConversionTypes } from \"./conversionTypes\";\nimport Card from \"./Components/Card\";\nimport FunctionCard from \"./Components/FunctionCard\";\nimport ConvertedRow from \"./Components/ConvertedRow\";\n\nconst ConvertersHandler = () => {\n  const [input, setInput] = React.useState(\"\");\n  const [isVisible, setIsVisible] = React.useState(false);\n  const [lastSelected, setLastSelected] = React.useState(-1);\n  const [displayableResults, setDisplayableResults] = React.useState([]);\n  const textarea = React.useRef();\n  const cardsRefs = React.useRef([]);\n  const [isSingleMode, setIsSingleMode] = React.useState(false);\n\n  // const [isMouseDown, setIsMouseDown] = React.useState(false);\n\n  let indexes = [];\n  //const [indexes, setIndexes] = React.useState([]);\n  // let [divCounter, setDivCounter] = React.useState(0);\n\n  const isBestResult = (result, input) => {\n    return (\n      displayableResults.filter((res) => res.input === input)[0] === result\n    );\n  };\n\n  const hasOnlyOneDisplayableResult = (input) => {\n    return (\n      displayableResults.filter((result) => result.input === input).length === 1\n    );\n  };\n\n  const hasNoDisplayableResults = (input) => {\n    return (\n      displayableResults.filter((result) => result.input === input).length === 0\n    );\n  };\n\n  const displayPossibleResults = (input) => {\n    if (isSingleMode) {\n      return (\n        <div>\n          {displayableResults\n            .filter((result) => result.input === input)\n            .map((result) => {\n              return (\n                <ConvertedRow\n                  conversionTypeId={result.conversionTypeId}\n                  result={result.resultValue}\n                />\n              );\n            })}\n        </div>\n      );\n    }\n\n    if (!hasOnlyOneDisplayableResult(input)) {\n      return (\n        <div key={input}>\n          <details>\n            {displayableResults\n              .filter((result) => result.input === input)\n              .map((result) => {\n                if (isBestResult(result, input)) {\n                  return (\n                    <summary>\n                      <ConvertedRow\n                        conversionTypeId={result.conversionTypeId}\n                        result={result.resultValue}\n                      />\n                    </summary>\n                  );\n                } else {\n                  return (\n                    <ConvertedRow\n                      conversionTypeId={result.conversionTypeId}\n                      result={result.resultValue}\n                    />\n                  );\n                }\n              })}\n          </details>\n        </div>\n      );\n    } else {\n      return (\n        <ConvertedRow\n          conversionTypeId={displayableResults[0].conversionTypeId}\n          result={displayableResults[0].resultValue}\n        />\n      );\n    }\n  };\n\n  const getNextIndex = () => {\n    return parseInt(indexes.shift());\n  };\n\n  const populateIndexesArray = (inputArrayLength) => {\n    for (let i = 0; i < inputArrayLength; i++) {\n      indexes.push(i);\n    }\n  };\n\n  const populateRefs = () => {\n    if (cardsRefs.current.length !== indexes.length) {\n      cardsRefs.current = Array(indexes.length)\n        .fill()\n        .map((_, i) => cardsRefs.current[i] || React.createRef());\n    }\n  };\n\n  const displayConversion = () => {\n    if (!input) return;\n\n    const inputArray = input.split(\"@\");\n\n    if (!inputArray) return;\n\n    populateIndexesArray(inputArray.length);\n\n    populateRefs();\n\n    if (isSingleMode) {\n      convertWord(inputArray[0]);\n\n      return displayBlock(inputArray[0]);\n    } else {\n      const index = getNextIndex();\n      // console.log({ index });\n      return (\n        <div>\n          <div ref={cardsRefs.current[index]}>\n            <FunctionCard\n              hover={(index) => hover(index)}\n              index={index}\n              word={inputArray[0]}\n            />\n          </div>\n\n          {inputArray.map((word) => {\n            //convertWord(word);\n            hexConversions(word);\n\n            return displayBlock(word);\n          })}\n        </div>\n        // </div>\n      );\n    }\n  };\n\n  const displayBlock = (word) => {\n    if (!word || hasNoDisplayableResults(word)) return;\n\n    const index = getNextIndex();\n\n    return (\n      <div ref={cardsRefs.current[index]} key={index}>\n        <Card\n          hover={(index) => hover(index)}\n          index={index}\n          word={word}\n          results={displayPossibleResults(word)}\n        />\n      </div>\n    );\n  };\n\n  const unselectPrevious = () => {\n    if (\n      lastSelected !== -1 &&\n      cardsRefs &&\n      cardsRefs.current[lastSelected] &&\n      cardsRefs.current[lastSelected].current\n    ) {\n      const lastSelectedCardRef = cardsRefs.current[lastSelected];\n      const lastSelectedCard = lastSelectedCardRef.current;\n\n      lastSelectedCard.style.backgroundColor = \"transparent\";\n    }\n  };\n\n  const highlightCard = () => {\n    unselectPrevious();\n\n    if (isSingleMode) return;\n    // if (isMouseDown) return;\n\n    console.log(\"highlight card\");\n\n    if (document.activeElement.tagName === \"TEXTAREA\") {\n      const text = window.getSelection().toString();\n\n      if (text.length > 0) {\n        const startIndex = document.activeElement.selectionStart; //.indexOf(text);\n\n        const inputArray = input.split(\"@\");\n\n        if (!inputArray) return;\n\n        const arrayIndex = input.substr(0, startIndex).split(\"@\").length - 1;\n\n        selectCard(arrayIndex);\n\n        setLastSelected(arrayIndex);\n      }\n    }\n  };\n\n  const selectCard = (index) => {\n    if (\n      !cardsRefs ||\n      !cardsRefs.current[index] ||\n      !cardsRefs.current[index].current\n    )\n      return;\n\n    cardsRefs.current[index].current.style.backgroundColor = \"#242526\";\n    cardsRefs.current[index].current.style.borderRadius = \"10px\";\n  };\n\n  const hover = (index) => {\n    unselectPrevious();\n\n    if (isSingleMode) return;\n    // if (isMouseDown) return;\n    if (!input) return;\n\n    const textToSelect = input.split(\"@\")[index];\n    const startingPos = input.indexOf(textToSelect);\n\n    selectCard(index);\n\n    setLastSelected(index);\n    textarea.current.setSelectionRange(\n      startingPos,\n      startingPos + textToSelect.length\n    );\n    textarea.current.focus();\n  };\n\n  const addToDisplayableResults = (conversionTypeId, resultValue, input) => {\n    if (\n      displayableResults.some(\n        (displayableResult) =>\n          displayableResult.conversionTypeId === conversionTypeId\n      )\n    ) {\n      return;\n    }\n\n    setDisplayableResults((oldArray) => [\n      ...oldArray,\n      {\n        conversionTypeId: conversionTypeId,\n        resultValue: resultValue,\n        input: input,\n      },\n    ]);\n  };\n\n  const hexConversions = (hexInput) => {\n    if (!hexInput) {\n      return;\n    }\n\n    tryConvertHexToBech32(hexInput);\n\n    tryConvertHexToString(hexInput);\n\n    tryConvertHexToDecimal(hexInput);\n\n    tryConvertHexToBase64(hexInput);\n  };\n\n  const convertWord = (input) => {\n    if (!input) {\n      return;\n    }\n\n    tryConvertBech32ToHex(input);\n\n    tryConvertHexToBech32(input);\n\n    tryConvertDecimalToHex(input);\n\n    tryConvertHexToDecimal(input);\n\n    tryConvertDecimalToBase64(input);\n\n    tryConvertBase64ToDecimal(input);\n\n    tryConvertAmountToDemoninate(input);\n\n    tryConvertDenominatedToAmount(input);\n\n    tryConvertStringToHex(input);\n\n    tryConvertHexToString(input);\n\n    tryConvertStringToBase64(input);\n\n    tryConvertBase64ToString(input);\n\n    tryConvertHexToBase64(input);\n\n    tryConvertBase64ToHex(input);\n\n    tryConvertBase64ToHexDecimal(input);\n  };\n\n  const clearInput = () => {\n    setInput(\"\");\n    textarea.current.focus();\n    textarea.current.style.height = \"45px\";\n  };\n\n  //#region TryConverts\n\n  const tryConvertHexToDecimal = (input) => {\n    if (checks.hexadecimal(input)) {\n      const result = parseInt(input, 16);\n\n      if (checks.decimal(result)) {\n        addToDisplayableResults(ConversionTypes.hexaToDecimal, result, input);\n      }\n    }\n  };\n\n  const tryConvertDecimalToHex = (input) => {\n    if (checks.decimal(input)) {\n      let result = parseInt(input, 10).toString(16);\n\n      if (result.length % 2 === 1) {\n        result = \"0\" + result;\n      }\n\n      if (checks.hexadecimal(result)) {\n        addToDisplayableResults(ConversionTypes.decimalToHexa, result, input);\n      }\n    }\n  };\n\n  const tryConvertHexToBech32 = (input) => {\n    if (checks.hexAddress(input)) {\n      let result;\n      try {\n        result = new Address(input).bech32();\n      } catch {}\n\n      if (result) {\n        addToDisplayableResults(ConversionTypes.hexToBech32, result, input);\n      }\n    }\n  };\n\n  const tryConvertBech32ToHex = (input) => {\n    if (checks.bech32Address(input)) {\n      let result;\n      try {\n        result = new Address(input).hex();\n      } catch {}\n\n      if (result) {\n        addToDisplayableResults(ConversionTypes.bech32ToHex, result, input);\n      }\n    }\n  };\n\n  const tryConvertBase64ToHex = (input) => {\n    if (checks.base64EncodedString(input)) {\n      const result = Buffer.from(input, \"base64\").toString(\"hex\");\n\n      addToDisplayableResults(\n        ConversionTypes.base64ToHexadecimal,\n        result,\n        input\n      );\n    }\n  };\n\n  const tryConvertHexToBase64 = (input) => {\n    if (checks.hexaEncodedString(input)) {\n      const result = Buffer.from(input, \"hex\").toString(\"base64\");\n\n      addToDisplayableResults(\n        ConversionTypes.hexadecimalToBase64,\n        result,\n        input\n      );\n    }\n  };\n\n  const tryConvertBase64ToString = (input) => {\n    if (checks.base64EncodedString(input)) {\n      const result = Buffer.from(input, \"base64\").toString(\"ascii\");\n\n      if (checks.stringValue(result)) {\n        addToDisplayableResults(ConversionTypes.base64ToString, result, input);\n      }\n    }\n  };\n\n  const tryConvertStringToBase64 = (input) => {\n    if (checks.stringValue(input)) {\n      const result = Buffer.from(input, \"ascii\").toString(\"base64\");\n\n      addToDisplayableResults(ConversionTypes.stringToBase64, result, input);\n    }\n  };\n\n  const tryConvertHexToString = (input) => {\n    if (checks.hexaEncodedString(input)) {\n      const result = Buffer.from(input, \"hex\").toString(\"utf8\");\n\n      if (checks.stringValue(result)) {\n        addToDisplayableResults(\n          ConversionTypes.hexadecimalToString,\n          result,\n          input\n        );\n      }\n    }\n  };\n\n  const tryConvertStringToHex = (input) => {\n    if (checks.stringValue(input)) {\n      const result = Buffer.from(input, \"ascii\").toString(\"hex\");\n\n      if (checks.hexadecimal(result)) {\n        addToDisplayableResults(\n          ConversionTypes.stringToHexadecimal,\n          result,\n          input\n        );\n      }\n    }\n  };\n\n  const tryConvertDenominatedToAmount = (input) => {\n    if (checks.denominatedAmount(input)) {\n      const result = Balance.fromString(input).toCurrencyString();\n\n      addToDisplayableResults(\n        ConversionTypes.denominatedToAmount,\n        result,\n        input\n      );\n    }\n  };\n\n  const tryConvertAmountToDemoninate = (input) => {\n    if (checks.amount(input)) {\n      const result = Balance.egld(input).toString();\n\n      addToDisplayableResults(\n        ConversionTypes.amountToDenominated,\n        result,\n        input\n      );\n    }\n  };\n\n  const tryConvertBase64ToDecimal = (input) => {\n    if (checks.base64Value(input)) {\n      const result = Buffer.from(input, \"base64\").toString(\"ascii\");\n\n      if (checks.decimal(result)) {\n        addToDisplayableResults(ConversionTypes.base64ToDecimal, result, input);\n      }\n    }\n  };\n\n  const tryConvertDecimalToBase64 = (input) => {\n    if (checks.decimal(input)) {\n      const result = Buffer.from(input, \"ascii\").toString(\"base64\");\n\n      if (checks.base64Value(result)) {\n        addToDisplayableResults(ConversionTypes.decimalToBase64, result, input);\n      }\n    }\n  };\n\n  const tryConvertBase64ToHexDecimal = (input) => {\n    if (checks.base64EncodedString(input)) {\n      const result1 = Buffer.from(input, \"base64\").toString(\"hex\");\n\n      if (checks.hexadecimal(result1)) {\n        const result2 = parseInt(result1, 16);\n\n        if (checks.decimal(result2)) {\n          addToDisplayableResults(\n            ConversionTypes.base64ToHexDecimal,\n            result2,\n            input\n          );\n        }\n      }\n    }\n  };\n  //#endregion\n\n  const resizeTextarea = () => {\n    textarea.current.style.height = \"5px\";\n    textarea.current.style.height = textarea.current.scrollHeight + \"px\";\n  };\n\n  return (\n    <div>\n      <div className=\"main-search-container py-spacer\">\n        <div className=\"container py-3\">\n          <div className=\"row\">\n            <div className=\"col-12 text-center\">\n              <h1 className=\"mb-4\">\n                <a\n                  style={{ color: \"inherit\" }}\n                  href=\"https://elrond-converters.netlify.app/\"\n                >\n                  XConverters\n                </a>\n              </h1>\n            </div>\n          </div>\n          <div className=\"row\">\n            <div className=\"col-12 col-lg-9 mx-auto\">\n              <form className=\"main-search w-100 d-flex\">\n                <div className=\"input-group\">\n                  <textarea\n                    onDoubleClick={() => highlightCard()}\n                    onMouseUp={() => {\n                      highlightCard();\n                    }}\n                    autoComplete=\"off\"\n                    id=\"input-text\"\n                    ref={textarea}\n                    value={input}\n                    rows=\"1\"\n                    style={{\n                      resize: \"none\",\n                      borderRadius: \"20px\",\n                      resizeBy: \"none\",\n                      overflowX: \"hidden\",\n                      // maxHeight: \"100px\",\n                      width: \"100%\",\n                    }}\n                    className=\"form-control border-0 py-3 pl-1 pl-lg-4\"\n                    placeholder=\"Insert a value to be converted.\"\n                    onChange={(event) => {\n                      setInput(event.target.value);\n                      setIsSingleMode(\n                        event.target.value.split(\"@\").length === 1\n                      );\n                      setDisplayableResults([]);\n                      setIsVisible(event.target.value !== null);\n                      resizeTextarea();\n                    }}\n                  />\n                </div>\n                <div\n                  className=\"clear-input\"\n                  onClick={() => clearInput()}\n                  style={{\n                    display: input ? \"inline\" : \"none\",\n                    position: \"absolute\",\n                    zIndex: \"100\",\n                    cursor: \"pointer\",\n                  }}\n                >\n                  <svg\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                    viewBox=\"0 0 24 24\"\n                    fill=\"#808080\"\n                  >\n                    <path d=\"M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z\" />\n                  </svg>\n                </div>\n              </form>\n            </div>\n          </div>\n          <div style={{ display: isVisible ? \"inline\" : \"none\" }}>\n            <div>{displayConversion()}</div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ConvertersHandler;\n","import React from \"react\";\n\ninterface CardParams {\n  index: number;\n  results: React.Component;\n  word: string;\n  hover: (index: number) => void\n}\n\nexport const Card = ({ index, results, word, hover }: CardParams) => {\n  // const [backColor, setBackColor] = React.useState(\"\");\n\n  return (\n    <div\n      onMouseEnter={() => {\n        hover(index);\n      }}\n      style={{ marginTop: \"2%\" }}\n      key={index}\n    >\n      <div className=\"container page-content\">\n        <div className=\"row\">\n          <div className=\"col-9\" style={{ marginLeft: \"12.5%\" }}>\n            <div className=\"transaction-info card\">\n              <div\n                className=\"card-header status-text-success\"\n                style={{\n                  backgroundColor: \"transparent\",\n                }}\n              >\n                <div className=\"card-header-item d-flex align-items-center\">\n                  <span>Possible Conversions for {word}</span>\n                </div>\n              </div>\n              <div\n                className=\"card-body p-0\"\n              >\n                <div className=\"container-fluid\">\n                  <div className=\"tab-content\">\n                    <div\n                      id=\"transaction-tabs-tabpane-details\"\n                      aria-labelledby=\"transaction-tabs-tab-details\"\n                      role=\"tabpanel\"\n                      aria-hidden=\"false\"\n                      className=\"fade tab-pane active show\"\n                    >\n                      {results}\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Card;\n","export const FunctionCard = (props: any) => {\n  const index = 0;\n\n  return (\n    <div\n      onMouseOver={() => {\n        props.hover(index);\n      }}\n      style={{ marginTop: \"2%\" }}\n      key={index}\n    >\n      <div className=\"container page-content\">\n        <div className=\"row\">\n          <div className=\"col-9\" style={{ marginLeft: \"12.5%\" }}>\n            <div className=\"transaction-info card\">\n              <div\n                className=\"card-header status-text-success\"\n                style={{\n                  display: index === 0 ? \"block\" : \"none\",\n                  backgroundColor: \"transparent\",\n                }}\n              >\n                <div className=\"card-header-item d-flex align-items-center\">\n                  <span>The function is: {props.word}</span>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default FunctionCard;\n","var map = {\n\t\"./bls.js\": 246,\n\t\"./bls_c.js\": 272\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 503;","import \"./App.css\";\nimport ConvertersHandler from \"./ConvertersHandler\";\n\nconst App = () => {\n  return (\n    <div>\n      <div>\n        <div>\n          <ConvertersHandler />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n","import { ConversionTypes } from \"./conversionTypes\";\n\nexport const converters = [\n  {\n    label: \"Bech32 => Hex\",\n    value: ConversionTypes.bech32ToHex,\n  },\n  {\n    label: \"Hex => Bech32\",\n    value: ConversionTypes.hexToBech32,\n  },\n  {\n    label: \"Decimal => Hex\",\n    value: ConversionTypes.decimalToHexa,\n  },\n  {\n    label: \"Hex => Decimal\",\n    value: ConversionTypes.hexaToDecimal,\n  },\n  {\n    label: \"Decimal => Base64\",\n    value: ConversionTypes.decimalToBase64,\n  },\n  {\n    label: \"Base64 => Decimal\",\n    value: ConversionTypes.base64ToDecimal,\n  },\n  {\n    label: \"Amount => Denominated\",\n    value: ConversionTypes.amountToDenominated,\n  },\n  {\n    label: \"Denominated => Amount\",\n    value: ConversionTypes.denominatedToAmount,\n  },\n  {\n    label: \"String => Hex\",\n    value: ConversionTypes.stringToHexadecimal,\n  },\n  {\n    label: \"Hex => String\",\n    value: ConversionTypes.hexadecimalToString,\n  },\n  {\n    label: \"String => Base64\",\n    value: ConversionTypes.stringToBase64,\n  },\n  {\n    label: \"Base64 => String\",\n    value: ConversionTypes.base64ToString,\n  },\n  {\n    label: \"Hex => Base64\",\n    value: ConversionTypes.hexadecimalToBase64,\n  },\n  {\n    label: \"Base64 => Hex\",\n    value: ConversionTypes.base64ToHexadecimal,\n  },\n  {\n    label: \"Base64 => Hex Decimal\",\n    value: ConversionTypes.base64ToHexDecimal,\n  },\n];\n","import React from \"react\";\nimport * as checks from \"../check\";\nimport { Balance } from \"@elrondnetwork/erdjs/out\";\n\ninterface ResultRowParams {\n  label: string;\n  result: string;\n}\n\nconst ResultRow = ({ label, result }: ResultRowParams) => {\n  const [showCheck, setShowCheck] = React.useState(false);\n\n  const copyToCliboard = async (text: string, event: any) => {\n    navigator.clipboard.writeText(text);\n\n    setShowCheck(true);\n    await new Promise((resolve) => setTimeout(resolve, 1000));\n    setShowCheck(false);\n  };\n\n  const displayDenominationIfNeeded = () => {\n    if (\n      String(label).endsWith(\"Decimal\") &&\n      checks.decimal(result) &&\n      String(result).length > 12\n    ) {\n      const denomination = Balance.fromString(result).toCurrencyString();\n\n      return (\n        <div\n          style={{\n            display: denomination !== \"\" ? \"block\" : \"none\",\n            position: \"absolute\",\n            top: \"15px\",\n            left: \"15px\",\n            color: \"GrayText\",\n          }}\n        >\n          {denomination}\n        </div>\n      );\n    }\n  };\n\n  return (\n    <div>\n      <div className=\"row py-3 border-bottom detail-item\">\n        <div className=\"col-lg-3 text-secondary text-lg-right pl-lg-spacer\">\n          {label}\n        </div>\n        <div className=\"col pr-lg-spacer\">\n          <div className=\"d-flex align-items-center text-break-all\">\n            {result}\n            <div>{displayDenominationIfNeeded()}</div>\n            {/* eslint-disable-next-line*/}\n            <a\n              onClick={(event) => copyToCliboard(result, event)}\n              className=\"side-action fa fa-check-double\"\n            >\n              <svg\n                style={{ display: showCheck ? \"none\" : \"block\" }}\n                aria-hidden=\"true\"\n                focusable=\"false\"\n                data-prefix=\"far\"\n                data-icon=\"clone\"\n                className=\"svg-inline--fa fa-clone fa-w-16 \"\n                role=\"img\"\n                xmlns=\"http://www.w3.org/2000/svg\"\n                viewBox=\"0 0 512 512\"\n              >\n                <path\n                  fill=\"currentColor\"\n                  d=\"M464 0H144c-26.51 0-48 21.49-48 48v48H48c-26.51 0-48 21.49-48 48v320c0 26.51 21.49 48 48 48h320c26.51 0 48-21.49 48-48v-48h48c26.51 0 48-21.49 48-48V48c0-26.51-21.49-48-48-48zM362 464H54a6 6 0 0 1-6-6V150a6 6 0 0 1 6-6h42v224c0 26.51 21.49 48 48 48h224v42a6 6 0 0 1-6 6zm96-96H150a6 6 0 0 1-6-6V54a6 6 0 0 1 6-6h308a6 6 0 0 1 6 6v308a6 6 0 0 1-6 6z\"\n                ></path>\n              </svg>\n              <svg\n                style={{ display: showCheck ? \"block\" : \"none\" }}\n                aria-hidden=\"true\"\n                focusable=\"false\"\n                data-prefix=\"far\"\n                data-icon=\"check\"\n                className=\"svg-inline--fa fa-check fa-w-16 text-primary\"\n                role=\"img\"\n                xmlns=\"http://www.w3.org/2000/svg\"\n                viewBox=\"0 0 512 512\"\n              >\n                <path\n                  fill=\"currentColor\"\n                  d=\"M 435.848 83.466 L 172.804 346.51 l -96.652 -96.652 c -4.686 -4.686 -12.284 -4.686 -16.971 0 l -28.284 28.284 c -4.686 4.686 -4.686 12.284 0 16.971 l 133.421 133.421 c 4.686 4.686 12.284 4.686 16.971 0 l 299.813 -299.813 c 4.686 -4.686 4.686 -12.284 0 -16.971 l -28.284 -28.284 c -4.686 -4.686 -12.284 -4.686 -16.97 0 Z\"\n                ></path>\n              </svg>\n            </a>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ResultRow;\n","import { converters } from \"../convertersObjects\";\nimport ResultRow from \"./ResultRow\";\n\ninterface ConvertedRowParams {\n    conversionTypeId: number;\n    result: string;\n}\n\nconst ConvertedRow = ({ conversionTypeId, result }: ConvertedRowParams) => {\n    let label = converters.filter((pair) => pair.value === conversionTypeId)[0].label;\n\n    if (!result) return \"\";\n\n    return (\n        <div key={Math.random()} >\n            <ResultRow label={label} result={result} />\n        </div>\n    );\n}\n\nexport default ConvertedRow;"],"sourceRoot":""}